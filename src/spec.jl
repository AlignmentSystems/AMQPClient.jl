# Source: amqp0-9-1.extended.xml
# This file is automatically generated.
# Do not edit this file by hand.
# Make changes to gen.jl or the source specification instead.

const AMQP_VERSION = v"0.9.1"
const AMQP_DEFAULT_PORT = 5672

# Constants
const FrameMethod = 1
const FrameHeader = 2
const FrameBody = 3
const FrameHeartbeat = 8
const FrameMinSize = 4096
const ReplySuccess = 200

# Error Codes
const SoftErrorContentTooLarge = 311
const SoftErrorNoConsumers = 313
const HardErrorConnectionForced = 320
const HardErrorInvalidPath = 402
const SoftErrorAccessRefused = 403
const SoftErrorNotFound = 404
const SoftErrorResourceLocked = 405
const SoftErrorPreconditionFailed = 406
const HardErrorFrameError = 501
const HardErrorSyntaxError = 502
const HardErrorCommandInvalid = 503
const HardErrorChannelError = 504
const HardErrorUnexpectedFrame = 505
const HardErrorResourceError = 506
const HardErrorNotAllowed = 530
const HardErrorNotImplemented = 540
const HardErrorInternalError = 541

# Domains
typealias TAMQPConsumerTag TAMQPShortStr
typealias TAMQPDeliveryTag Int64
typealias TAMQPExchangeName TAMQPShortStr
typealias TAMQPNoAck UInt8
typealias TAMQPNoLocal UInt8
typealias TAMQPNoWait UInt8
typealias TAMQPPath TAMQPShortStr
typealias TAMQPPeerProperties TAMQPFieldTable
typealias TAMQPQueueName TAMQPShortStr
typealias TAMQPRedelivered UInt8
typealias TAMQPMessageCount Int32
typealias TAMQPReplyCode Int16
typealias TAMQPReplyText TAMQPShortStr
# end Domains

# Classes
const CLASS_MAP = Dict{TAMQPClassId,ClassSpec}(
    10 => ClassSpec(10, :Connection, Dict{TAMQPMethodId, MethodSpec}(
        10 => MethodSpec(10, :Start, :StartOk, Pair{Symbol,DataType}[
            :VersionMajor => UInt8
            , :VersionMinor => UInt8
            , :ServerProperties => TAMQPPeerProperties
            , :Mechanisms => TAMQPLongStr
            , :Locales => TAMQPLongStr
        ]) # method Start
        , 11 => MethodSpec(11, :StartOk, :Void, Pair{Symbol,DataType}[
            :ClientProperties => TAMQPPeerProperties
            , :Mechanism => TAMQPShortStr
            , :Response => TAMQPLongStr
            , :Locale => TAMQPShortStr
        ]) # method StartOk
        , 20 => MethodSpec(20, :Secure, :SecureOk, Pair{Symbol,DataType}[
            :Challenge => TAMQPLongStr
        ]) # method Secure
        , 21 => MethodSpec(21, :SecureOk, :Void, Pair{Symbol,DataType}[
            :Response => TAMQPLongStr
        ]) # method SecureOk
        , 30 => MethodSpec(30, :Tune, :TuneOk, Pair{Symbol,DataType}[
            :ChannelMax => Int16
            , :FrameMax => Int32
            , :Heartbeat => Int16
        ]) # method Tune
        , 31 => MethodSpec(31, :TuneOk, :Void, Pair{Symbol,DataType}[
            :ChannelMax => Int16
            , :FrameMax => Int32
            , :Heartbeat => Int16
        ]) # method TuneOk
        , 40 => MethodSpec(40, :Open, :OpenOk, Pair{Symbol,DataType}[
            :VirtualHost => TAMQPPath
            , :Reserved1 => TAMQPShortStr
            , :Reserved2 => UInt8
        ]) # method Open
        , 41 => MethodSpec(41, :OpenOk, :Void, Pair{Symbol,DataType}[
            :Reserved1 => TAMQPShortStr
        ]) # method OpenOk
        , 50 => MethodSpec(50, :Close, :CloseOk, Pair{Symbol,DataType}[
            :ReplyCode => TAMQPReplyCode
            , :ReplyText => TAMQPReplyText
            , :ClassId => UInt16
            , :MethodId => UInt16
        ]) # method Close
        , 51 => MethodSpec(51, :CloseOk, :Void, Pair{Symbol,DataType}[
        ]) # method CloseOk
        , 60 => MethodSpec(60, :Blocked, :Void, Pair{Symbol,DataType}[
            :Reason => TAMQPShortStr
        ]) # method Blocked
        , 61 => MethodSpec(61, :Unblocked, :Void, Pair{Symbol,DataType}[
        ]) # method Unblocked
    )) # class Connection
    , 20 => ClassSpec(20, :Channel, Dict{TAMQPMethodId, MethodSpec}(
        10 => MethodSpec(10, :Open, :OpenOk, Pair{Symbol,DataType}[
            :Reserved1 => TAMQPShortStr
        ]) # method Open
        , 11 => MethodSpec(11, :OpenOk, :Void, Pair{Symbol,DataType}[
            :Reserved1 => TAMQPLongStr
        ]) # method OpenOk
        , 20 => MethodSpec(20, :Flow, :FlowOk, Pair{Symbol,DataType}[
            :Active => UInt8
        ]) # method Flow
        , 21 => MethodSpec(21, :FlowOk, :Void, Pair{Symbol,DataType}[
            :Active => UInt8
        ]) # method FlowOk
        , 40 => MethodSpec(40, :Close, :CloseOk, Pair{Symbol,DataType}[
            :ReplyCode => TAMQPReplyCode
            , :ReplyText => TAMQPReplyText
            , :ClassId => UInt16
            , :MethodId => UInt16
        ]) # method Close
        , 41 => MethodSpec(41, :CloseOk, :Void, Pair{Symbol,DataType}[
        ]) # method CloseOk
    )) # class Channel
    , 40 => ClassSpec(40, :Exchange, Dict{TAMQPMethodId, MethodSpec}(
        10 => MethodSpec(10, :Declare, :DeclareOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Exchange => TAMQPExchangeName
            , :Type => TAMQPShortStr
            , :Passive => UInt8
            , :Durable => UInt8
            , :AutoDelete => UInt8
            , :Internal => UInt8
            , :NoWait => TAMQPNoWait
            , :Arguments => TAMQPFieldTable
        ]) # method Declare
        , 11 => MethodSpec(11, :DeclareOk, :Void, Pair{Symbol,DataType}[
        ]) # method DeclareOk
        , 20 => MethodSpec(20, :Delete, :DeleteOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Exchange => TAMQPExchangeName
            , :IfUnused => UInt8
            , :NoWait => TAMQPNoWait
        ]) # method Delete
        , 21 => MethodSpec(21, :DeleteOk, :Void, Pair{Symbol,DataType}[
        ]) # method DeleteOk
        , 30 => MethodSpec(30, :Bind, :BindOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Destination => TAMQPExchangeName
            , :Source => TAMQPExchangeName
            , :RoutingKey => TAMQPShortStr
            , :NoWait => TAMQPNoWait
            , :Arguments => TAMQPFieldTable
        ]) # method Bind
        , 31 => MethodSpec(31, :BindOk, :Void, Pair{Symbol,DataType}[
        ]) # method BindOk
        , 40 => MethodSpec(40, :Unbind, :UnbindOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Destination => TAMQPExchangeName
            , :Source => TAMQPExchangeName
            , :RoutingKey => TAMQPShortStr
            , :NoWait => TAMQPNoWait
            , :Arguments => TAMQPFieldTable
        ]) # method Unbind
        , 51 => MethodSpec(51, :UnbindOk, :Void, Pair{Symbol,DataType}[
        ]) # method UnbindOk
    )) # class Exchange
    , 50 => ClassSpec(50, :Queue, Dict{TAMQPMethodId, MethodSpec}(
        10 => MethodSpec(10, :Declare, :DeclareOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Queue => TAMQPQueueName
            , :Passive => UInt8
            , :Durable => UInt8
            , :Exclusive => UInt8
            , :AutoDelete => UInt8
            , :NoWait => TAMQPNoWait
            , :Arguments => TAMQPFieldTable
        ]) # method Declare
        , 11 => MethodSpec(11, :DeclareOk, :Void, Pair{Symbol,DataType}[
            :Queue => TAMQPQueueName
            , :MessageCount => TAMQPMessageCount
            , :ConsumerCount => Int32
        ]) # method DeclareOk
        , 20 => MethodSpec(20, :Bind, :BindOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Queue => TAMQPQueueName
            , :Exchange => TAMQPExchangeName
            , :RoutingKey => TAMQPShortStr
            , :NoWait => TAMQPNoWait
            , :Arguments => TAMQPFieldTable
        ]) # method Bind
        , 21 => MethodSpec(21, :BindOk, :Void, Pair{Symbol,DataType}[
        ]) # method BindOk
        , 50 => MethodSpec(50, :Unbind, :UnbindOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Queue => TAMQPQueueName
            , :Exchange => TAMQPExchangeName
            , :RoutingKey => TAMQPShortStr
            , :Arguments => TAMQPFieldTable
        ]) # method Unbind
        , 51 => MethodSpec(51, :UnbindOk, :Void, Pair{Symbol,DataType}[
        ]) # method UnbindOk
        , 30 => MethodSpec(30, :Purge, :PurgeOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Queue => TAMQPQueueName
            , :NoWait => TAMQPNoWait
        ]) # method Purge
        , 31 => MethodSpec(31, :PurgeOk, :Void, Pair{Symbol,DataType}[
            :MessageCount => TAMQPMessageCount
        ]) # method PurgeOk
        , 40 => MethodSpec(40, :Delete, :DeleteOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Queue => TAMQPQueueName
            , :IfUnused => UInt8
            , :IfEmpty => UInt8
            , :NoWait => TAMQPNoWait
        ]) # method Delete
        , 41 => MethodSpec(41, :DeleteOk, :Void, Pair{Symbol,DataType}[
            :MessageCount => TAMQPMessageCount
        ]) # method DeleteOk
    )) # class Queue
    , 60 => ClassSpec(60, :Basic, Dict{TAMQPMethodId, MethodSpec}(
        10 => MethodSpec(10, :Qos, :QosOk, Pair{Symbol,DataType}[
            :PrefetchSize => Int32
            , :PrefetchCount => Int16
            , :Global => UInt8
        ]) # method Qos
        , 11 => MethodSpec(11, :QosOk, :Void, Pair{Symbol,DataType}[
        ]) # method QosOk
        , 20 => MethodSpec(20, :Consume, :ConsumeOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Queue => TAMQPQueueName
            , :ConsumerTag => TAMQPConsumerTag
            , :NoLocal => TAMQPNoLocal
            , :NoAck => TAMQPNoAck
            , :Exclusive => UInt8
            , :NoWait => TAMQPNoWait
            , :Arguments => TAMQPFieldTable
        ]) # method Consume
        , 21 => MethodSpec(21, :ConsumeOk, :Void, Pair{Symbol,DataType}[
            :ConsumerTag => TAMQPConsumerTag
        ]) # method ConsumeOk
        , 30 => MethodSpec(30, :Cancel, :CancelOk, Pair{Symbol,DataType}[
            :ConsumerTag => TAMQPConsumerTag
            , :NoWait => TAMQPNoWait
        ]) # method Cancel
        , 31 => MethodSpec(31, :CancelOk, :Void, Pair{Symbol,DataType}[
            :ConsumerTag => TAMQPConsumerTag
        ]) # method CancelOk
        , 40 => MethodSpec(40, :Publish, :Void, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Exchange => TAMQPExchangeName
            , :RoutingKey => TAMQPShortStr
            , :Mandatory => UInt8
            , :Immediate => UInt8
        ]) # method Publish
        , 50 => MethodSpec(50, :Return, :Void, Pair{Symbol,DataType}[
            :ReplyCode => TAMQPReplyCode
            , :ReplyText => TAMQPReplyText
            , :Exchange => TAMQPExchangeName
            , :RoutingKey => TAMQPShortStr
        ]) # method Return
        , 60 => MethodSpec(60, :Deliver, :Void, Pair{Symbol,DataType}[
            :ConsumerTag => TAMQPConsumerTag
            , :DeliveryTag => TAMQPDeliveryTag
            , :Redelivered => TAMQPRedelivered
            , :Exchange => TAMQPExchangeName
            , :RoutingKey => TAMQPShortStr
        ]) # method Deliver
        , 70 => MethodSpec(70, :Get, :GetOk, Pair{Symbol,DataType}[
            :Reserved1 => Int16
            , :Queue => TAMQPQueueName
            , :NoAck => TAMQPNoAck
        ]) # method Get
        , 71 => MethodSpec(71, :GetOk, :Void, Pair{Symbol,DataType}[
            :DeliveryTag => TAMQPDeliveryTag
            , :Redelivered => TAMQPRedelivered
            , :Exchange => TAMQPExchangeName
            , :RoutingKey => TAMQPShortStr
            , :MessageCount => TAMQPMessageCount
        ]) # method GetOk
        , 72 => MethodSpec(72, :GetEmpty, :Void, Pair{Symbol,DataType}[
            :Reserved1 => TAMQPShortStr
        ]) # method GetEmpty
        , 80 => MethodSpec(80, :Ack, :Void, Pair{Symbol,DataType}[
            :DeliveryTag => TAMQPDeliveryTag
            , :Multiple => UInt8
        ]) # method Ack
        , 90 => MethodSpec(90, :Reject, :Void, Pair{Symbol,DataType}[
            :DeliveryTag => TAMQPDeliveryTag
            , :Requeue => UInt8
        ]) # method Reject
        , 100 => MethodSpec(100, :RecoverAsync, :Void, Pair{Symbol,DataType}[
            :Requeue => UInt8
        ]) # method RecoverAsync
        , 110 => MethodSpec(110, :Recover, :Void, Pair{Symbol,DataType}[
            :Requeue => UInt8
        ]) # method Recover
        , 111 => MethodSpec(111, :RecoverOk, :Void, Pair{Symbol,DataType}[
        ]) # method RecoverOk
        , 120 => MethodSpec(120, :Nack, :Void, Pair{Symbol,DataType}[
            :DeliveryTag => TAMQPDeliveryTag
            , :Multiple => UInt8
            , :Requeue => UInt8
        ]) # method Nack
    )) # class Basic
    , 90 => ClassSpec(90, :Tx, Dict{TAMQPMethodId, MethodSpec}(
        10 => MethodSpec(10, :Select, :SelectOk, Pair{Symbol,DataType}[
        ]) # method Select
        , 11 => MethodSpec(11, :SelectOk, :Void, Pair{Symbol,DataType}[
        ]) # method SelectOk
        , 20 => MethodSpec(20, :Commit, :CommitOk, Pair{Symbol,DataType}[
        ]) # method Commit
        , 21 => MethodSpec(21, :CommitOk, :Void, Pair{Symbol,DataType}[
        ]) # method CommitOk
        , 30 => MethodSpec(30, :Rollback, :RollbackOk, Pair{Symbol,DataType}[
        ]) # method Rollback
        , 31 => MethodSpec(31, :RollbackOk, :Void, Pair{Symbol,DataType}[
        ]) # method RollbackOk
    )) # class Tx
    , 85 => ClassSpec(85, :Confirm, Dict{TAMQPMethodId, MethodSpec}(
        10 => MethodSpec(10, :Select, :SelectOk, Pair{Symbol,DataType}[
            :Nowait => UInt8
        ]) # method Select
        , 11 => MethodSpec(11, :SelectOk, :Void, Pair{Symbol,DataType}[
        ]) # method SelectOk
    )) # class Confirm
) # CLASS_MAP")

function make_classmethod_map()
    cmmap = Dict{Tuple{Symbol,Symbol},MethodSpec}()
    for v in values(CLASS_MAP)
        for m in values(v.method_map)
            cmmap[(v.name,m.name)] = m
        end
    end
    cmmap
end

const CLASSNAME_MAP = Dict{Symbol,ClassSpec}(v.name => v for v in values(CLASS_MAP))
const CLASSMETHODNAME_MAP = make_classmethod_map()
# end Classes

# end generated code
